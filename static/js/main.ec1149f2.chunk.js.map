{"version":3,"sources":["common/utils.js","elements/ErrorElement.js","elements/SimpleJSONTextElement.js","versionA/versionA.js","elements/AudioElement.js","elements/IPAElement.js","versionB/Phonetic.js","versionB/Phonetics.js","versionB/PhoneticList.js","versionB/versionB.js","versionC/Meaning.js","versionC/MeaningList.js","versionC/MeaningAll.js","versionC/ListItem.js","versionC/ListAll.js","versionC/versionC.js","App.js","reportWebVitals.js","index.js"],"names":["fetchPatch","path","a","fetch","response","ok","status","Error","json","message","ErrorElement","p","className","aMessage","SimpleJSONTextElement","aJSON","versionA","result","ReactDOM","render","document","getElementById","apiAddress","value","trim","word","then","data","JSON","stringify","catch","e","AudioElement","audio","aAudio","element","undefined","hasOwnProperty","href","IPAElement","ipa","aIPA","text","PhoneticItem","Phonetic","phonetic","aPhonetic","Phonetics","phonetics","aPhonetics","i","length","separator1","separator2","Object","keys","push","PhoneticList","aData","map","x","versionB","Meaning","example","aExample","definition","aDefinition","MeaningList","definitions","aDefinitions","aWord","letter","partOfSpeech","charAt","slice","type","MeaningAll","meanings","aMeanings","ListItem","origin","ListAll","versionC","App","for","id","defaultValue","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.ec1149f2.chunk.js","sourcesContent":["// Async function fetch data from server.\r\n// Function return word definition in JSON format or error message if word is not found.\r\n// In case if word not found response code is 404.\r\n// All other response code throw error.\r\n\r\nconst fetchPatch = async (path) => {\r\n  // Await data to be fetched from server\r\n  let response = await fetch(path);\r\n\r\n  //Throw error if response is not OK (200..299) or word is not found (404).\r\n  if (!response.ok) {\r\n    if (response.status === 404) {\r\n      // Await to resolve message from provided server response\r\n      throw new Error(await (await response.json()).message);\r\n    } else {\r\n      // Throw error for any other respons codes\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n  }\r\n\r\n  // Return JSON object\r\n  return await response.json();\r\n};\r\n\r\nexport { fetchPatch };\r\n","/********************************************************************************\r\n  \r\n  Represent simple error element with message.\r\n  \r\n********************************************************************************/\r\n\r\nimport \"../elements/ErrorElement.css\";\r\n\r\n// Element properties:\r\n// p.aMessage -> Should contain error message string\r\nfunction ErrorElement(p) {\r\n    let element = <div className=\"ErrorElement\">{p.aMessage}</div>;\r\n    return element;\r\n}\r\n\r\nexport { ErrorElement };\r\n","/********************************************************************************\r\n  \r\n  Represent simple JSON element displayed as text.\r\n  \r\n********************************************************************************/\r\n\r\nimport \"../elements/SimpleJSONTextElement.css\";\r\n\r\n// Element properties:\r\n// p.aJSON -> Should contain stringified JSON\r\nfunction SimpleJSONTextElement(p) {\r\n    let element = <div className=\"SimpleJSONTextElement\">{p.aJSON}</div>;\r\n    return element;\r\n}\r\n\r\nexport { SimpleJSONTextElement };\r\n","/********************************************************************************\r\n  \r\n  Contains onClick event handler for button. Event handler call fetchPatch\r\n  that may throw error. If data is retrived from server, display it as simple\r\n  stringified JSON.\r\n  \r\n********************************************************************************/\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { fetchPatch } from \"../common/utils\";\r\nimport { ErrorElement } from \"../elements/ErrorElement\";\r\nimport { SimpleJSONTextElement } from \"../elements/SimpleJSONTextElement\";\r\n\r\nconst versionA = async () => {\r\n    // Prepare result variable for render\r\n    let result = <div></div>;\r\n\r\n    // Clear OutputA element\r\n    ReactDOM.render(result, document.getElementById(\"OutputA\"));\r\n\r\n    // Preparing target end-point path\r\n    let apiAddress = document.getElementById(\"inputAddress\").value.trim();\r\n    let word = document.getElementById(\"inputA\").value.trim();\r\n    let path = `${apiAddress}${word}`;\r\n\r\n    // Fetch data from server in JSON format ...\r\n    await fetchPatch(path)\r\n        // ... then prepare result for render\r\n        .then((data) => {\r\n            // Data from server is in JSON format and it just need to be stringified\r\n            result = <SimpleJSONTextElement aJSON={JSON.stringify(data)} />;\r\n        })\r\n        // ... or prepare catched error for render\r\n        .catch((e) => {\r\n            result = <ErrorElement aMessage={e.message} />;\r\n        });\r\n\r\n    // Render elements\r\n    ReactDOM.render(result, document.getElementById(\"OutputA\"));\r\n};\r\n\r\nexport { versionA };\r\n","/********************************************************************************\r\n\r\n  Audio element contains link to audio file. Always show 'audio' text. It has\r\n  space in front of link.\r\n\r\n********************************************************************************/\r\n\r\nimport \"./AudioElement.css\";\r\n\r\nconst onClick = (e) => {\r\n    let audio = new Audio(e);\r\n    audio.play();\r\n};\r\n\r\n// Element properties:\r\n// p.aAudio -> Should contain JSON with link to audio file\r\nfunction AudioElement(p) {\r\n    // Get properties\r\n    let audio = p.aAudio;\r\n\r\n    //Initialize variables\r\n    let element = \"\";\r\n\r\n    // Return null if audio is not present\r\n    if (audio === undefined || audio === null) return element;\r\n\r\n    // Construct element from provided JSON\r\n    if (audio.hasOwnProperty(\"audio\")) {\r\n        // Element contains space in front of link\r\n        element = (\r\n            <span className=\"AudioElement\">\r\n                {\" \"}\r\n                <a href={audio.audio} className=\"AudioElement-a\">\r\n                    audio\r\n                </a>\r\n                {/* <button onClick={(x) => onClick(audio.audio)}>audio</button> */}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\nexport { AudioElement };\r\n","/********************************************************************************\r\n\r\n  IPA element contains pronunciation of word if it exist in dictionary.\r\n\r\n********************************************************************************/\r\n\r\nimport \"./IPAElement.css\";\r\n\r\n// Element properties:\r\n// p.aIPA -> Should contain JSON with link to audio file\r\nfunction IPAElement(p) {\r\n    // Get properties\r\n    let ipa = p.aIPA;\r\n\r\n    //Initialize variables\r\n    let element = \"\";\r\n\r\n    // Return null if audio is not present\r\n    if (ipa === undefined || ipa === null) return element;\r\n\r\n    // Construct element from provided JSON\r\n    if (ipa.hasOwnProperty(\"text\")) {\r\n        // Element contains / around IPA\r\n        element = <span className=\"IPAElement\">/{ipa.text}/</span>;\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\nexport { IPAElement };\r\n","/********************************************************************************\r\n\r\n  Element that contains list of phonetic elements for one word.\r\n\r\n********************************************************************************/\r\n\r\nimport { AudioElement } from \"../elements/AudioElement\";\r\nimport { IPAElement } from \"../elements/IPAElement\";\r\nimport \"./Phonetic.css\";\r\n\r\n// Element properties:\r\n// p.text -> Element that contains IPA\r\n// p.audio -> Element that contains audio\r\nfunction PhoneticItem(p) {\r\n    let element = (\r\n        <span className=\"Phonetic\">\r\n            {p.text}\r\n            {p.audio}\r\n        </span>\r\n    );\r\n    return element;\r\n}\r\n\r\n// Element properties:\r\n// p.aPhonetic -> Should contain one phonetic object\r\nfunction Phonetic(p) {\r\n    // Get parameter from function properties\r\n    let phonetic = p.aPhonetic;\r\n\r\n    // Return IPA if exists\r\n    let text = <IPAElement aIPA={phonetic} />;\r\n\r\n    // Return audio as hiperlink if exists\r\n    let audio = <AudioElement aAudio={phonetic} />;\r\n\r\n    // Return JSX\r\n    return <PhoneticItem text={text} audio={audio} />;\r\n}\r\n\r\nexport { Phonetic };\r\n","/********************************************************************************\r\n\r\n  Element that contains list of phonetic elements for one word.\r\n\r\n********************************************************************************/\r\n\r\nimport { Phonetic } from \"./Phonetic\";\r\nimport \"./Phonetics.css\";\r\n\r\n// Element properties:\r\n// p.aPhonetics -> 'phonetics' JSON object from backend. Contains word followed by list of phonetics.\r\nfunction Phonetics(p) {\r\n    // Get parameter from function properties\r\n    let phonetics = p.aPhonetics;\r\n\r\n    // Prepare empty list for result\r\n    let result = [];\r\n\r\n    for (let i = 0; i < phonetics.length; i++) {\r\n        // Separator1 is located after word and it is not printed if there is no pronunciations\r\n        let separator1 = \"\";\r\n        if (phonetics.length > 0 && i === 0) separator1 = \" ‒ \";\r\n\r\n        // Separator2 divide multiple pronunciations for same word if exissts\r\n        let separator2 = i === phonetics.length - 1 ? \".\" : \", \";\r\n\r\n        // If there is no element brake loop\r\n        if (Object.keys(phonetics[i]).length === 0) continue;\r\n\r\n        // Return JSX containing anything after word\r\n        result.push(\r\n            <span className=\"Phonetics\">\r\n                {separator1}\r\n                <Phonetic aPhonetic={phonetics[i]} />\r\n                {separator2}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport { Phonetics };\r\n","/********************************************************************************\r\n  \r\n  Element that contains list of words followed by phonetic list.\r\n\r\n********************************************************************************/\r\n\r\nimport { Phonetics } from \"./Phonetics\";\r\nimport \"./PhoneticList.css\";\r\n\r\n// Element properties:\r\n// p.aData -> Should contains data for one word from server\r\nfunction PhoneticList(p) {\r\n    let element = (\r\n        <div className=\"PhoneticList\">\r\n            {p.aData.map((x) => (\r\n                <p className=\"PhoneticItem\">\r\n                    <b className=\"PhoneticItem-b\">{x.word}</b>\r\n                    <Phonetics aPhonetics={x.phonetics} />\r\n                </p>\r\n            ))}\r\n        </div>\r\n    );\r\n    return element;\r\n}\r\n\r\nexport { PhoneticList };\r\n","/********************************************************************************\r\n  \r\n  Contains onClick event handler for button. Event handler call fetchPatch\r\n  that may throw error. If data is retrived from server, display word with\r\n  phonetics.\r\n  \r\n********************************************************************************/\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { fetchPatch } from \"../common/utils\";\r\nimport { ErrorElement } from \"../elements/ErrorElement\";\r\nimport { PhoneticList } from \"./PhoneticList\";\r\n\r\nconst versionB = async () => {\r\n    // Clear OutputB element\r\n    ReactDOM.render(<div></div>, document.getElementById(\"OutputB\"));\r\n\r\n    // Preparing target end-point path and variable initialization\r\n    let apiAddress = document.getElementById(\"inputAddress\").value.trim();\r\n    let word = document.getElementById(\"inputB\").value.trim();\r\n    let path = `${apiAddress}${word}`;\r\n    let result = null;\r\n\r\n    // Fetch data from server in JSON format ...\r\n    await fetchPatch(path)\r\n        // ... then prepare list of phonetics\r\n        .then((data) => {\r\n            result = <PhoneticList aData={data} />;\r\n        })\r\n        // ... or prepare catched error for render\r\n        .catch((e) => {\r\n            result = <ErrorElement aMessage={e.message} />;\r\n        });\r\n\r\n    // Render elements\r\n    ReactDOM.render(result, document.getElementById(\"OutputB\"));\r\n};\r\n\r\nexport { versionB };\r\n","/********************************************************************************\r\n\r\n  Meaning item contains definition and example. Example is ommited if do not\r\n  exist in data from server.\r\n\r\n********************************************************************************/\r\n\r\nimport \"./Meaning.css\";\r\n\r\n// Element properties:\r\n// p.aDefinition -> Should contain word definition\r\n// p.aExample -> Contain example for definition\r\nfunction Meaning(p) {\r\n    // Get parameter from function properties\r\n    let example = p.aExample;\r\n    let definition = p.aDefinition;\r\n    // Return element...\r\n    if (example === undefined) {\r\n        // .. without example when it is not provided, or ...\r\n        return <li className=\"Meaning\">{definition}</li>;\r\n    } else {\r\n        // .. with example.\r\n        return (\r\n            <li className=\"Meaning\">\r\n                {definition}\r\n                <br /> Example: <i className=\"Meaning-i\">{example}</i>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Meaning };\r\n","/********************************************************************************\r\n\r\n  Return list item that contains all definitions for given word.\r\n\r\n********************************************************************************/\r\n\r\nimport { Meaning } from \"./Meaning\";\r\nimport \"./MeaningList.css\";\r\n\r\n// Element properties:\r\n// p.aDefinitions -> Should contain word and all definitions\r\n// p.aWord -> Relevant word\r\nfunction MeaningList(p) {\r\n    // Get parameter from function properties\r\n    let definitions = p.aDefinitions;\r\n    let word = p.aWord;\r\n\r\n    // Find abravation of word type\r\n    let letter = definitions.partOfSpeech.charAt(0);\r\n    if (letter === \"a\") {\r\n        letter = definitions.partOfSpeech.slice(0, 3);\r\n    }\r\n\r\n    // Return List item that contains word and word tipe. It also contains list of definitions and examples\r\n    return (\r\n        <li className=\"MeaningList\">\r\n            {\" \"}\r\n            <b className=\"MeaningList-b\">{word}</b>, {letter}.\r\n            <ol type=\"a\" className=\"MeaningList-ol\">\r\n                {definitions.definitions.map((x) => (\r\n                    <Meaning aDefinition={x.definition} aExample={x.example} />\r\n                ))}\r\n            </ol>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport { MeaningList };\r\n","/********************************************************************************\r\n\r\n  Meanings in enumerated list of definitions and examples.\r\n\r\n********************************************************************************/\r\n\r\nimport { MeaningList } from \"./MeaningList\";\r\nimport \"./MeaningAll.css\";\r\n\r\n// Element properties:\r\n// p.aMeanings -> All word meanings\r\n// p.aWord -> Relevant word\r\nfunction MeaningAll(p) {\r\n    // Get parameter from function properties\r\n    let meanings = p.aMeanings;\r\n    let word = p.aWord;\r\n\r\n    // Return all meanings in one list\r\n    return (\r\n        <ol type=\"I\" className=\"MeaningAll\">\r\n            {meanings.map((x) => (\r\n                <MeaningList aDefinitions={x} aWord={word} />\r\n            ))}\r\n        </ol>\r\n    );\r\n}\r\n\r\nexport { MeaningAll };\r\n","/********************************************************************************\r\n\r\n  Meaning in enumerated list of definitions and examples.\r\n\r\n********************************************************************************/\r\n\r\nimport { Phonetics } from \"../versionB/Phonetics\";\r\nimport { MeaningAll } from \"./MeaningAll\";\r\nimport \"./ListItem.css\";\r\n\r\n// Element properties:\r\n// p.aData -> All word meanings\r\nfunction ListItem(p) {\r\n    // Get parameter from function properties\r\n    let data = p.aData;\r\n\r\n    // Return meaning for one word\r\n    return (\r\n        <li className=\"ListItem\">\r\n            <b className=\"ListItem-b\">{data.word}</b>\r\n            <Phonetics aPhonetics={data.phonetics} />\r\n            <br />\r\n            <u className=\"ListItem-u\">Origin:</u> {data.origin}\r\n            <MeaningAll aMeanings={data.meanings} aWord={data.word} />\r\n        </li>\r\n    );\r\n}\r\n\r\nexport { ListItem };\r\n","/********************************************************************************\r\n\r\n  Return list that contains all elements enumerated in one list ready for render.\r\n\r\n********************************************************************************/\r\n\r\nimport \"./ListAll.css\";\r\nimport { ListItem } from \"./ListItem\";\r\n\r\n// Element properties:\r\n// p.aData -> All word meanings\r\nfunction ListAll(p) {\r\n    // Get parameter from function properties\r\n    let data = p.aData;\r\n\r\n    // Return all meanings in one list\r\n    return (\r\n        <div className=\"ListAll\">\r\n            <ol className=\"ListAll-ol\">\r\n                {data.map((x) => (\r\n                    <ListItem aData={x} />\r\n                ))}\r\n            </ol>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { ListAll };\r\n","/********************************************************************************\r\n  \r\n  Contains onClick event handler for button. Event handler call fetchPatch\r\n  that may throw error. If data is retrived from server, display word with\r\n  phonetics and other details.\r\n  \r\n********************************************************************************/\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { fetchPatch } from \"../common/utils\";\r\nimport { ErrorElement } from \"../elements/ErrorElement\";\r\nimport { ListAll } from \"./ListAll\";\r\n\r\nconst versionC = async () => {\r\n    // Clear OutputC element\r\n    ReactDOM.render(<div></div>, document.getElementById(\"OutputC\"));\r\n\r\n    // Preparing target end-point path and variable initialization\r\n    let apiAddress = document.getElementById(\"inputAddress\").value.trim();\r\n    let word = document.getElementById(\"inputC\").value.trim();\r\n    let path = `${apiAddress}${word}`;\r\n    let result = null;\r\n\r\n    // Fetch data from server in JSON format ...\r\n    await fetchPatch(path)\r\n        // ... then prepare result for render\r\n        .then((data) => {\r\n            result = <ListAll aData={data} />;\r\n        })\r\n        // ... or prepare catched error for render\r\n        .catch((e) => {\r\n            result = <ErrorElement aMessage={e.message} />;\r\n        });\r\n\r\n    // Render elements\r\n    ReactDOM.render(result, document.getElementById(\"OutputC\"));\r\n};\r\n\r\nexport { versionC };\r\n","import \"./App.css\";\r\nimport { versionA } from \"./versionA/versionA\";\r\nimport { versionB } from \"./versionB/versionB\";\r\nimport { versionC } from \"./versionC/versionC\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            {/* Api endpoint address */}\r\n            <h1>Dictionary</h1>\r\n            <div className=\"frame\">\r\n                <label for=\"inputAddress\" className=\"frame2\">\r\n                    Free Dictionary API end-point address\r\n                </label>{\" \"}\r\n                <br />\r\n                <input\r\n                    id=\"inputAddress\"\r\n                    defaultValue=\"https://api.dictionaryapi.dev/api/v2/entries/en/\"\r\n                ></input>\r\n            </div>\r\n            <hr />\r\n\r\n            {/* Version A */}\r\n            <div>\r\n                <div className=\"frame\">\r\n                    <label for=\"inputA\">Verzija A:</label>\r\n                    <input id=\"inputA\" defaultValue=\"book\"></input>\r\n                    <button onClick={versionA}>nađi</button> <br />\r\n                </div>\r\n                <div id=\"OutputA\"></div>\r\n            </div>\r\n            <hr />\r\n\r\n            {/* Version B */}\r\n            <div>\r\n                <div className=\"frame\">\r\n                    <label for=\"inputB\">Verzija B:</label>\r\n                    <input id=\"inputB\" defaultValue=\"spoon\"></input>\r\n                    <button onClick={versionB}>nađi</button> <br />\r\n                </div>\r\n                <div id=\"OutputB\"></div>\r\n            </div>\r\n            <hr />\r\n\r\n            {/* Version C */}\r\n            <div>\r\n                <div className=\"frame\">\r\n                    <label for=\"inputC\">Verzija C:</label>\r\n                    <input id=\"inputC\" defaultValue=\"set\"></input>\r\n                    <button onClick={versionC}>nađi</button> <br />\r\n                </div>\r\n                <div id=\"OutputC\"></div>\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}